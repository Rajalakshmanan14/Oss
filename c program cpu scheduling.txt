C programs for cpu Scheduling:

1. First Come First Serve:

Program:

#include<stdio.h>

int main(){

	int bt[10]={0},at[10]={0},tat[10]={0},wt[10]={0},ct[10]={0};
	int i,j,k,n,sum=0;
	float totalTAT=0,totalWT=0;

	printf("Enter number of processes	");
	scanf("%d",&n);

	printf("Enter arrival time and burst time for each process\n\n");

	for( i=0;i<n;i++)
	{

		printf("Arrival time of process[%d]	",i+1);
		scanf("%d",&at[i]);
		
		printf("Burst time of process[%d]	",i+1);
		scanf("%d",&bt[i]);
		
		printf("\n");
	}
		
	//calculate completion time of processes 	

	for( j=0;j<n;j++)
	{
		sum+=bt[j];
		ct[j]+=sum;
	}

	//calculate turnaround time and waiting times 

	for( k=0;k<n;k++)
	{
		tat[k]=ct[k]-at[k];
		totalTAT+=tat[k];
	}

	
	for(k=0;k<n;k++)
	{
		wt[k]=tat[k]-bt[k];
		totalWT+=wt[k];
	}
	
	printf("Solution: \n\n");
	printf("P#\t AT\t BT\t CT\t TAT\t WT\t\n\n");
	
	for(i=0;i<n;i++)
	{
		printf("P%d\t %d\t %d\t %d\t %d\t %d\n",i+1,at[i],bt[i],ct[i],tat[i],wt[i]);
	}
		
	printf("\n\nAverage Turnaround Time = %f\n",totalTAT/n);
	printf("Average WT = %f\n\n",totalWT/n);
	
	return 0;
}



2. Shortest Job first:

Program: 

#include<stdio.h>

float avg(int a[],int n){
  int s=0,i;
  float av;
  for(i=0;i<n;i++){
    s+=a[i];
  }
  av=(float)s/n;
  return av;
}

void main(void){
  int At[]={1,2,3,4,5},Bt[]={7,5,1,2,8},Ct[5],Tat[5],Wt[5],temp[5],c[5],t1=0,t2=0,n=5,i=0,j=0,s=0,av=0;
  for (i=1;i<n;i++)
    for (j=1;j<n-i-1;j++)
    {
      if(Bt[j]>Bt[j+1])
      {
        t1=Bt[j];
      Bt[j]=Bt[j+1];
      Bt[j+1]=t1;
      
      t2=At[j];
      At[j]=At[j+1];
      At[j+1]=t2;
      }
  }
  
  for(i=0;i<n;i++){
    if(i==0){
        s=Bt[i]+1;
        Ct[i]=s;
        Tat[i]=s-At[i];
        Wt[i]=Tat[i]-Bt[i];
    }
    else{
        s+=Bt[i];
        Ct[i]=s;
        Tat[i]=s-At[i];
        Wt[i]=Tat[i]-Bt[i];
    }
    printf("%d ",Ct[i]);
   }
   
  printf("\n");
  
  printf("Average Turn Around Time:%f\n",avg(Tat,5));
  
  printf("\n");
    
  printf("Average Turn Around Time:%f\n",avg(Wt,5));

  
}


3. Shortest Remaining Time First:

Program:

#include <stdio.h> 
 
  int main() 
{ 
 
  int n, ari[10], bur[10], total = 0, i, j, small, temp, procs[100], k, waiting[10], finish[10]; 
 
  float tavg = 0.0, wavg = 0.0; 
 
  printf("ENTER THE NUMBER OF PROCESSES:"); 
 
  scanf("%d", & n); 
 
  for (i = 0; i < n; i++) 
 
  { 
 
    printf("ENTER THE ARRIVAL TIME OF PROCESS %d:\t", i); 
 
    scanf("%d", & ari[i]); 
     
    printf("ENTER THE BURST TIME OF PROCESS %d:\t", i); 
 
    scanf("%d", & bur[i]); 
 
    waiting[i] = 0; 
 
    total += bur[i]; 
 
  } 
 
  for (i = 0; i < n; i++) 
 
  { 
 
    for (j = i + 1; j < n; j++) 
 
    { 
 
      if (ari[i] > ari[j]) 
 
      { 
 
        temp = ari[i]; 
 
        ari[i] = ari[j]; 
 
        ari[j] = temp; 
 
        temp = bur[i]; 
 
        bur[i] = bur[j]; 
 
        bur[j] = temp; 
 
      } 
 
    } 
 
  } 
 
  for (i = 0; i < total; i++) 
 
  { 
 
    small = 3200; 
 
    for (j = 0; j < n; j++) 
 
    { 
 
      if ((bur[j] != 0) && (ari[j] <= i) && (bur[j] < small)) 
 
      { 
 
        small = bur[j]; 
        k = j; 
 
      } 
 
    } 
 
    bur[k]--; 
 
    procs[i] = k; 
 
  } 
 
  k = 0; 
 
  for (i = 0; i < total; i++) 
 
  { 
 
    for (j = 0; j < n; j++) 
 
    { 
 
      if (procs[i] == j) 
 
      { 
 
        finish[j] = i; 
 
        waiting[j]++; 
 
      } 
 
    } 
 
  } 
 
  for (i = 0; i < n; i++) 
 
  { 
 
    printf("\n PROCESS %d:-FINISH TIME==> %d TURNAROUND TIME==>%d WAITING TIME==>%d\n", i + 1, finish[i] + 1, (finish[i] - ari[i]) + 1, (((finish[i] + 1) - waiting[i]) - ari[i])); 
 
    wavg = wavg + (((finish[i] + 1) - waiting[i]) - ari[i]); 
 
    tavg = tavg + ((finish[i] - ari[i]) + 1); 
 
  } 
 
  printf("\n WAvG==>\t%f\n TAVG==>\t%f\n", (wavg / n), (tavg / n)); 
 
  return 0; 
 
} 


4. Round Robin 

Program:

#include<stdio.h>
 
int main()
{
      int i, limit, total = 0, x, counter = 0, time_quantum;
      int wait_time = 0, turnaround_time = 0, arrival_time[10], burst_time[10], temp[10];
      float average_wait_time, average_turnaround_time;
      printf("Enter Total Number of Processes:\t");
      scanf("%d", &limit);
      x = limit;
      for(i = 0; i < limit; i++)
      {
            printf("\nEnter Details of Process[%d]\n", i + 1);
 
            printf("Arrival Time:");
 
            scanf("%d", &arrival_time[i]);
 
            printf("Burst Time:");
 
            scanf("%d", &burst_time[i]);
 
            temp[i] = burst_time[i];
      }
 
      printf("\nEnter Time Quantum:t");
      scanf("%d", &time_quantum);
      printf("\nProcess\t\t Burst \t\tTimeTurnaroundTime \t\tWaitingTime");
      for(total = 0, i = 0; x != 0;)
      {
            if(temp[i] <= time_quantum && temp[i] > 0)
            {
                  total = total + temp[i];
                  temp[i] = 0;
                  counter = 1;
            }
            else if(temp[i] > 0)
            {
                  temp[i] = temp[i] - time_quantum;
                  total = total + time_quantum;
            }
            if(temp[i] == 0 && counter == 1)
            {
                  x--;
                  printf("\nProcess[%d]\t\t%d\t\t %d\t\t\t %d", i + 1, burst_time[i], total - arrival_time[i], total - arrival_time[i] - burst_time[i]);
                  wait_time = wait_time + total - arrival_time[i] - burst_time[i];
                  turnaround_time = turnaround_time + total - arrival_time[i];
                  counter = 0;
            }
            if(i == limit - 1)
            {
                  i = 0;
            }
            else if(arrival_time[i + 1] <= total)
            {
                  i++;
            }
            else
            {
                  i = 0;
            }
      }
 
      average_wait_time = wait_time * 1.0 / limit;
      average_turnaround_time = turnaround_time * 1.0 / limit;
      printf("\nAverage Waiting Time:%f", average_wait_time);
      printf("\nAvg Turnaround Time:%fn", average_turnaround_time);
      return 0;
}